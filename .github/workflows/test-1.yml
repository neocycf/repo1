# This is a basic workflow to help you get started with Actions

name: simple

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  #push:
  #  branches: [ main ]
  #pull_request:
  #  branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Create external cluster yaml
      - name: Create yaml
        run: |
          mkdir test-dir && cd test-dir
          cat <<EOF > test-target-cluster.yaml
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: argocd-manager
            namespace: kube-system
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          metadata:
            name: argocd-manager-role
          rules:
          - apiGroups:
            - '*'
            resources:
            - '*'
            verbs:
            - '*'
          - nonResourceURLs:
            - '*'
            verbs:
           - '*'
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: argocd-manager-role-binding
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: argocd-manager-role
          subjects:
          - kind: ServiceAccount
            name: argocd-manager
            namespace: kube-system
          EOF
          cat test-target-cluster.yaml
            
      # tg apply on external cluster yaml
      - name: tg apply on external yaml
        run: |
          echo Applying the yaml on external cluster...
          
      # Get values from external cluster k8s object
      - name: get k8s object values
        run: |
          echo Get k8s object values. Have to do kubectx and execute kubectl command.
      
      - name: create yaml for main cluster
        run: |
          mkdir main-dir && cd main-dir
          export token=aaa123bbb
          cat <<EOF > test-main-cluster.yaml
          apiVersion: v1
          kind: Secret
          metadata:
            name: gke-eu1
            labels:
              argocd.argoproj.io/secret-type: cluster
          type: Opaque
          stringData:
            name: gke-eu1
            server: https://gke-eu1.inlets:443
            config: |
              {
                "bearerToken": "${token}",
                 "tlsClientConfig": {
                   "insecure": true
                 }
              }
          EOF
          cat test-main-cluster.yaml
          
      # tg apply on main cluster yaml
      - name: tg apply on main yaml
        run: |
          echo Applying the yaml on main cluster...
          
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
          
